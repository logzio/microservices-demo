apiVersion:  apps/v1
kind: Deployment
metadata:
  name: otel-collector-logzio
  labels:
    app: otel-logzio
    app.kubernetes.io/name: otel-logzio
    app.kubernetes.io/component: collector
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: otel-logzio
      app.kubernetes.io/name: otel-logzio
      app.kubernetes.io/component: collector
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: otel-logzio
        app.kubernetes.io/name: otel-logzio
        app.kubernetes.io/component: collector
    spec:
      serviceAccount: prometheus
      containers:
      - image: otel/opentelemetry-collector-contrib:0.33.0
        name: otel-collector-logzio
        ports:
        - containerPort: 1888   # pprof extension
          protocol: TCP
        - containerPort: 4317 # Otel port
          protocol: TCP
        - containerPort: 9411  # Zipkin receiver
          protocol: TCP
        - containerPort: 8888  # Prometheus metrics exposed by the collector
          protocol: TCP
        - containerPort: 13133  # health_check extension
          protocol: TCP
        - containerPort: 14250 #jaeger receiver
          protocol: TCP
        env:
          - name: LOGZIO_TRACES_TOKEN
            valueFrom:
              secretKeyRef:
                key: logzio-tracing-shipping-token # This is the secret you created in step 4 above. 
                name: logzio-tracing-secret
          - name: LOGZIO_METRICS_TOKEN
            valueFrom:
              secretKeyRef:
                key: logzio-metrics-shipping-token # This is the secret you created in step 4 above. 
                name: logzio-metrics-secret
        volumeMounts:
        - name: otel-collector-config
          mountPath: "/etc/otel/config.yaml"
          readOnly: true
          subPath: config.yaml
      volumes:
      - name: otel-collector-config
        configMap:
          name: otel-collector-config

---
apiVersion: v1
kind: ConfigMap
metadata:
 name: otel-collector-config
 namespace: monitoring
 labels:
   app: otel-logzio
   component: otel-collector-conf
data:
 config.yaml: |
  receivers:
    otlp/spanmetrics:
      protocols:
        grpc:
          endpoint: :12345
    otlp:
      protocols:
        grpc:
          endpoint: :4317
    opencensus:
    zipkin:
      endpoint: :9411
    jaeger:
      protocols:
        thrift_http:
        grpc:
    prometheus:
      config:
        global:
          external_labels:
            p8s_logzio_name: sock-shop-otel
        scrape_configs: 
        - job_name: 'atm'
          scrape_interval: 15s
          static_configs:
          - targets: [ "0.0.0.0:8889" ]
  exporters:
    logzio:
      account_token: "${LOGZIO_TRACES_TOKEN}"
      region: "us"    # Replace with the 2-letter code for your region from the Logz.io Regions and Listener hosts table or from your Account settings page - as in step 3 above. 
    prometheusremotewrite:
      endpoint: https://listener.logz.io:8053
      headers:
        Authorization: Bearer ${LOGZIO_METRICS_TOKEN}
    prometheus:
      endpoint: "localhost:8889"
    logging:
  processors:
    batch:
    k8s_tagger:
    probabilistic_sampler:
      hash_seed: 22
      sampling_percentage: 10
    spanmetrics:
      metrics_exporter: prometheus
      latency_histogram_buckets: [2ms, 6ms, 10ms, 100ms, 250ms, 500ms, 1000ms, 10000ms, 100000ms, 1000000ms]
      # Additional list of dimensions on top of:
      # - service.name
      # - operation
      # - span.kind
      # - status.code
      dimensions:
        # If the span is missing http.method, the processor will insert
        # the http.method dimension with value 'GET'.
        # For example, in the following scenario, http.method is not present in a span and so will be added as a dimension to the metric with value "GET":
        # - promexample_calls{http_method="GET",operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
        - name: http.method
          default: GET
        # If a default is not provided, the http.status_code dimension will be omitted
        # if the span does not contain http.status_code.
        # For example, consider a scenario with two spans, one span having http.status_code=200 and another missing http.status_code. Two metrics would result with this configuration, one with the http_status_code omitted and the other included:
        # - promexample_calls{http_status_code="200",operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
        # - promexample_calls{operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
        - name: http.status_code
  extensions:
    pprof:
      endpoint: :1777
    zpages:
      endpoint: :55679
    health_check:
  service:
    extensions: [health_check, pprof]
    pipelines:
      traces:
        receivers: [otlp, opencensus, jaeger, zipkin]
        processors: [spanmetrics,probabilistic_sampler,k8s_tagger,batch]
        exporters: [logzio]
      metrics/spanmetrics:
        # This receiver is just a dummy and never used.
        # Added to pass validation requiring at least one receiver in a pipeline.
        receivers: [otlp/spanmetrics]
        exporters: [prometheus]
      metrics:
        receivers: [otlp,prometheus]
        exporters: [logging,prometheusremotewrite]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app: otel-logzio
    app.kubernetes.io/name: otel-logzio
    app.kubernetes.io/component: collector
  namespace: monitoring
spec:
  ports:
  - name: otel-collector-grpc
    protocol: TCP
    port: 4317
    targetPort: 4317
  - name: jaeger-health-check
    port: 14269
    protocol: TCP
    targetPort: 14269
  - name: jaeger-collector-http
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-collector-zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-collector-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    app: otel-logzio
    app.kubernetes.io/name: otel-logzio
    app.kubernetes.io/component: collector
  type: ClusterIP